package gov.bnl.racf.exda;

import java.sql.*;
import java.util.Calendar;
import java.io.*;

import java.awt.Color;

import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;



public class LatencyMatrix
{  
    private String moduleName="LatencyMatrix";

    private String latencyMetricName="net.perfsonar.service.ma.latency";

    private ParameterBag parameterBag = null;

    private DbConnector db=null;

    private ResultSet rs=null;

    private List<String> listOfSourceHosts=new ArrayList<String>();
    private List<String> listOfDestinationHosts=new ArrayList<String>();
    private int numberOfHostNames=0;

    public LatencyMatrix(ParameterBag paramBag,   DbConnector inputDb)
	{
	    parameterBag=paramBag;
	    db=inputDb;

	    //=========== get matrix nodes =======
	    String getSourceHosts="select DISTINCT HostName2 from MetricRecordSummary where MetricName=? order by HostName2";	    

	    try{
		PreparedStatement initialisationSql= db.getConn().prepareStatement(getSourceHosts);
		initialisationSql.setString(1,  latencyMetricName  );
		rs=initialisationSql.executeQuery();
		//rs=db.query(getSourceHosts);
		int count = 0;
		while (rs.next ())
		    {
			String src=rs.getString("HostName2");
			listOfSourceHosts.add(src);
			listOfDestinationHosts.add(src);
			count=count+1;
		    }
		numberOfHostNames=count;


	    }catch (Exception e){
		System.out.println(moduleName+" error occured when reading database");
		System.out.println(e);
	    }



	}

    public String toString(){
	String result="Hello world from latency matrix";
	return result;
    }

    public HtmlTable htmlTable(){

	HtmlTable ht=new HtmlTable(numberOfHostNames+1);
	
	HtmlTableCell firstCell=new HtmlTableCell("---");
	ht.addCell(firstCell);

	for (int i=0;i<numberOfHostNames;i=i+1){
	    ht.addCell(new HtmlTableCell(Integer.toString(i)));
	}

	for (int iSrc=0;iSrc<listOfSourceHosts.size();iSrc=iSrc+1){
	    String src=listOfSourceHosts.get(iSrc);

	    HtmlTableCell firstColumnCell = new HtmlTableCell(Integer.toString(iSrc)+":"+src);
	    firstColumnCell.alignLeft();
	    ht.addCell(firstColumnCell);
	    
	    for (int iDst=0;iDst<listOfDestinationHosts.size();iDst=iDst+1){		
		String dst=listOfDestinationHosts.get(iDst);

		    LatencyNode upperNode=new LatencyNode(parameterBag,db,src,dst,src);
		    LatencyNode lowerNode=new LatencyNode(parameterBag,db,src,dst,dst);
		    HtmlTable nodeTable=new HtmlTable(1);
		    nodeTable.addCell(upperNode.veryShortStatusCell());
		    nodeTable.addCell(lowerNode.veryShortStatusCell());
		    nodeTable.setBorder(0);
		    nodeTable.setPadding(0);
		    ht.addCell(new HtmlTableCell(nodeTable.toHtml()));
		    
	    }
	}


	return ht;
    }

    public HtmlTable shortHtmlTable(){

	HtmlTable ht=new HtmlTable(1);

	return ht;	    	    		
    }
}
